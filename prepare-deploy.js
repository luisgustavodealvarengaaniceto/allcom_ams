#!/usr/bin/env node
/**
 * Script para prepara√ß√£o do deploy para produ√ß√£o Oracle
 * Este script automatiza a limpeza de arquivos desnecess√°rios antes do deploy
 * 
 * Uso: node prepare-deploy.js
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ Iniciando prepara√ß√£o para deploy em produ√ß√£o Oracle...');

// Cria pasta de deploy se n√£o existir
const DEPLOY_DIR = path.join(__dirname, 'deploy-oracle');
if (!fs.existsSync(DEPLOY_DIR)) {
  fs.mkdirSync(DEPLOY_DIR, { recursive: true });
  console.log(`‚úÖ Pasta de deploy criada: ${DEPLOY_DIR}`);
}

// Fun√ß√£o para ler lista de arquivos a remover
function getFilesToRemove() {
  try {
    const filePath = path.join(__dirname, 'ARQUIVOS-PARA-REMOVER.txt');
    const content = fs.readFileSync(filePath, 'utf8');
    return content
      .split('\n')
      .filter(line => line.trim().length > 0)
      .map(line => line.trim());
  } catch (error) {
    console.error('‚ùå Erro ao ler arquivo ARQUIVOS-PARA-REMOVER.txt:', error.message);
    return [];
  }
}

// Fun√ß√£o para copiar arquivos essenciais
function copyEssentialFiles() {
  const essentialFiles = [
    'index.html',
    'login.html',
    'help.html',
    'favicon.svg',
    'users.json',
    'package.json',
    'package-lock.json',
    'proxy-server.js',
    '.env.production.example'
  ];

  const essentialDirs = {
    'css': ['styles.css', 'login.css'],
    'js': [
      'production-config.js',
      'auth.js',
      'login.js',
      'app.js',
      'cache-manager.js',
      'dashboard-manager.js',
      'export-manager.js',
      'firmware-manager.js',
      'performance-manager.js',
      'reset-system.js'
    ]
  };

  // Copiar arquivos principais
  essentialFiles.forEach(file => {
    const sourcePath = path.join(__dirname, file);
    const targetPath = path.join(DEPLOY_DIR, file);
    
    if (fs.existsSync(sourcePath)) {
      fs.copyFileSync(sourcePath, targetPath);
      console.log(`‚úÖ Copiado: ${file}`);
    } else {
      console.warn(`‚ö†Ô∏è Arquivo n√£o encontrado: ${file}`);
    }
  });

  // Copiar diret√≥rios espec√≠ficos
  Object.entries(essentialDirs).forEach(([dir, files]) => {
    const targetDir = path.join(DEPLOY_DIR, dir);
    if (!fs.existsSync(targetDir)) {
      fs.mkdirSync(targetDir, { recursive: true });
    }

    files.forEach(file => {
      const sourcePath = path.join(__dirname, dir, file);
      const targetPath = path.join(DEPLOY_DIR, dir, file);
      
      if (fs.existsSync(sourcePath)) {
        fs.copyFileSync(sourcePath, targetPath);
        console.log(`‚úÖ Copiado: ${dir}/${file}`);
      } else {
        console.warn(`‚ö†Ô∏è Arquivo n√£o encontrado: ${dir}/${file}`);
      }
    });
  });

  // Criar arquivo .env a partir do exemplo
  const envExamplePath = path.join(__dirname, '.env.production.example');
  const envTargetPath = path.join(DEPLOY_DIR, '.env');
  
  if (fs.existsSync(envExamplePath)) {
    fs.copyFileSync(envExamplePath, envTargetPath);
    console.log('‚úÖ Criado arquivo .env para produ√ß√£o');
  } else {
    console.warn('‚ö†Ô∏è Arquivo .env.production.example n√£o encontrado');
  }

  // Adicionar README para produ√ß√£o
  const readmePath = path.join(__dirname, 'README-PRODUCAO.md');
  const readmeTargetPath = path.join(DEPLOY_DIR, 'README.md');
  
  if (fs.existsSync(readmePath)) {
    fs.copyFileSync(readmePath, readmeTargetPath);
    console.log('‚úÖ Copiado README para produ√ß√£o');
  }
}

// Fun√ß√£o principal
function main() {
  console.log('üßπ Iniciando prepara√ß√£o dos arquivos para produ√ß√£o...');
  
  // Listar arquivos a serem removidos
  const filesToRemove = getFilesToRemove();
  console.log(`üìã ${filesToRemove.length} arquivos/diret√≥rios ser√£o exclu√≠dos da vers√£o de produ√ß√£o`);

  // Copiar apenas os arquivos essenciais
  copyEssentialFiles();

  // Criar arquivo de verifica√ß√£o
  const deployCheckPath = path.join(DEPLOY_DIR, 'deploy-info.json');
  fs.writeFileSync(deployCheckPath, JSON.stringify({
    deployDate: new Date().toISOString(),
    version: '2.0.0',
    environment: 'production-oracle',
    preparedBy: 'prepare-deploy.js'
  }, null, 2));

  console.log('\nüéâ Prepara√ß√£o para deploy conclu√≠da!');
  console.log(`üìÅ Vers√£o de produ√ß√£o dispon√≠vel em: ${DEPLOY_DIR}`);
  console.log('‚ö†Ô∏è LEMBRETE: Ajuste o arquivo .env com suas credenciais antes do deploy.\n');
  console.log('üöÄ Para instalar depend√™ncias e iniciar, execute:');
  console.log('   cd deploy-oracle');
  console.log('   npm install --production');
  console.log('   npm start\n');
}

// Executar
main();
